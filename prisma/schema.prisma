datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  buyer
  seller
  admin
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  image         String?
  role          Role            @default(buyer)
  email         String          @unique
  emailVerified DateTime?
  password      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Product       Product[]
  Review        Review[]
  Shop          Shop[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  image     String
  details   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@unique([name, slug])
  @@map("categories")
}

model Shop {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  image       String
  details     String
  address     String
  sellerEmail String    @unique @map("seller_email")
  user        User      @relation(fields: [sellerEmail], references: [email], onDelete: NoAction, onUpdate: NoAction)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("shops")
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String   @unique
  images         String[]
  price          Float
  stock          Int
  description    String
  specifications String[]
  shopName       String   @map("shop_name")
  categorySlug   String   @map("category_slug")
  shop           Shop     @relation(fields: [shopName], references: [name])
  category       Category @relation(fields: [categorySlug], references: [slug])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  reviews        Review[]
  User           User?    @relation(fields: [userId], references: [id])
  userId         String?  @db.ObjectId

  @@map("products")
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @map("product_id") @db.ObjectId
  userId    String  @map("user_id") @db.ObjectId
  rating    Float
  comment   String
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
