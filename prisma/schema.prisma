// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  user
  admin
  super_admin
}

model User {
  id        String   @id @default(uuid())
  name      String
  picture   String?
  email     String   @unique
  password  String
  role      Role     @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviews   Review[]

  @@map("users")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  image     String?
  details   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Product {
  id           String   @id @default(uuid())
  title        String
  categoryName String
  category     Category @relation(fields: [categoryName], references: [name], onDelete: NoAction, onUpdate: NoAction)
  price        Float
  images       String[]
  description  String
  features     String[]
  available    Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  reviews      Review[]

  @@map("products")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}
