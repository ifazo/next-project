datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  buyer
  seller
  admin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  image         String?
  role          Role      @default(buyer)
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  reviews       Review[]
  shop          Shop?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  image     String
  details   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Shop {
  id          String    @id @default(uuid())
  name        String    @unique
  image       String
  details     String
  address     String
  sellerEmail String    @unique @map("seller_email")
  user        User      @relation(fields: [sellerEmail], references: [email])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("shops")
}

model Product {
  id             String   @id @default(uuid())
  name           String   @unique
  images         String[]
  variants       String[]
  price          Float
  stock          Int
  description    String
  specifications String[]
  shopName       String   @map("shop_name")
  categorySlug   String   @map("category_slug")
  shop           Shop     @relation(fields: [shopName], references: [name])
  category       Category @relation(fields: [categorySlug], references: [slug])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  reviews        Review[]

  @@map("products")
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  comment   String
  productId String   @map("product_id")
  userEmail String   @map("user_email")
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userEmail], references: [email])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}
